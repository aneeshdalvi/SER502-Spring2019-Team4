Consolidated contributions for creating DESI Compiler:
Team 4 Members:
Aneesh Dalvi (adlavi1)
Janice Abraham (jjabrah5)
Jinal Patel (jspatel5)
Viraj Talaty (vtalaty)

  Aneesh :- 
      Created sample source code file by adhering to our language 
      Created Following source code files -
          1. Sample If construct
          2. Sample ElseIf construct
          3. Sample Else construct
          4. Sample While construct
          5. Orthogonal constructs
      Implemented intermediate code genaration logic and added compile time verfication for our custom language
      1. Updated existing grammar to handle boolean values
      2. Implemented logic for intermediate code generation for following constructs:
          - If 
          - Else If
          - Else
          - Boolean expression generation with precedence
          - Load instruction
  
  Janice :- 
      Designed sample intermediate code for our language and added that into our compiler
      Created Following intermediate code files -
          1. Sample If construct
          2. Sample ElseIf construct
          3. Sample Else construct
          4. Sample While construct
          5. Orthogonal constructs
      Implemented Run time behaviour for following constructs
          1. If 
          2. Else If
          3. Else
          4. Nested Ifs and elseIfs 
          5. Boolean expression evaluation
          6. Load instruction
          
  Jinal :- 
      Generated lexical analyser to read source code file and generated token based on desiGrammar.g4 file
      Implemented Run time behaviour for following constructs
          1. While
          2. Arithmetic expression evaluation
          3. Type checking at runtime
          4. Nested While
          5. Print instruction
          6. Boolean AND, OR in if condition
          
  Viraj :- 
      Generated all visitor classes using desiGrammar.g4 file
      Implemented intermediate code genaration logic and added compile time verfication for our custom language
          1. Added opearators precedence for the current grammar
          2. Implemented logic for intermediate code generation for following constructs:
            - While
            - Arithmetic expression generation with precedence
            - Variable initialization based on datatype at compile time
            - Print instruction
            - Boolean AND, OR genaration in if condition
